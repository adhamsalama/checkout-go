// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package users

import (
	"context"
)

const createuser = `-- name: Createuser :one
INSERT INTO users (
  username, password, date
) VALUES (
  ?, ?, ?
)
RETURNING id, username, password, date
`

type CreateuserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Date     string `json:"date"`
}

func (q *Queries) Createuser(ctx context.Context, arg CreateuserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createuser, arg.Username, arg.Password, arg.Date)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Date,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password FROM users
WHERE username = ?
`

type GetUserRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password FROM users
WHERE username = ?
`

func (q *Queries) GetUserPassword(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, username)
	var password string
	err := row.Scan(&password)
	return password, err
}
