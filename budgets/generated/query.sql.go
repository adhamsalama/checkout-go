// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package budgets

import (
	"context"
)

const createMonthlyBudget = `-- name: CreateMonthlyBudget :one
INSERT INTO monthly_budgets (
  user_id, name, value, date
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, user_id, name, value, date
`

type CreateMonthlyBudgetParams struct {
	UserID int64   `json:"userId"`
	Name   string  `json:"name"`
	Value  float64 `json:"value"`
	Date   string  `json:"date"`
}

func (q *Queries) CreateMonthlyBudget(ctx context.Context, arg CreateMonthlyBudgetParams) (MonthlyBudget, error) {
	row := q.db.QueryRowContext(ctx, createMonthlyBudget,
		arg.UserID,
		arg.Name,
		arg.Value,
		arg.Date,
	)
	var i MonthlyBudget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Value,
		&i.Date,
	)
	return i, err
}

const createTaggedBudget = `-- name: CreateTaggedBudget :one
INSERT INTO tagged_budgets (
  user_id, name, value, interval_in_days, tag, date
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, user_id, name, value, interval_in_days, tag, date
`

type CreateTaggedBudgetParams struct {
	UserID         int64   `json:"userId"`
	Name           string  `json:"name"`
	Value          float64 `json:"value"`
	IntervalInDays int64   `json:"intervalInDays"`
	Tag            string  `json:"tag"`
	Date           string  `json:"date"`
}

func (q *Queries) CreateTaggedBudget(ctx context.Context, arg CreateTaggedBudgetParams) (TaggedBudget, error) {
	row := q.db.QueryRowContext(ctx, createTaggedBudget,
		arg.UserID,
		arg.Name,
		arg.Value,
		arg.IntervalInDays,
		arg.Tag,
		arg.Date,
	)
	var i TaggedBudget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Value,
		&i.IntervalInDays,
		&i.Tag,
		&i.Date,
	)
	return i, err
}

const deleteMonthlyBudget = `-- name: DeleteMonthlyBudget :exec
DELETE FROM monthly_budgets WHERE user_id = ?
`

func (q *Queries) DeleteMonthlyBudget(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMonthlyBudget, userID)
	return err
}

const deleteTaggedBudget = `-- name: DeleteTaggedBudget :exec
DELETE FROM tagged_budgets WHERE user_id = ? AND id = ?
`

type DeleteTaggedBudgetParams struct {
	UserID int64 `json:"userId"`
	ID     int64 `json:"id"`
}

func (q *Queries) DeleteTaggedBudget(ctx context.Context, arg DeleteTaggedBudgetParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaggedBudget, arg.UserID, arg.ID)
	return err
}

const getMonthlyBudget = `-- name: GetMonthlyBudget :one
SELECT id, user_id, name, value, date FROM monthly_budgets
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetMonthlyBudget(ctx context.Context, userID int64) (MonthlyBudget, error) {
	row := q.db.QueryRowContext(ctx, getMonthlyBudget, userID)
	var i MonthlyBudget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Value,
		&i.Date,
	)
	return i, err
}

const getTaggedBudget = `-- name: GetTaggedBudget :one
SELECT id, user_id, name, value, interval_in_days, tag, date FROM tagged_budgets
WHERE user_id = ? AND id = ?
`

type GetTaggedBudgetParams struct {
	UserID int64 `json:"userId"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetTaggedBudget(ctx context.Context, arg GetTaggedBudgetParams) (TaggedBudget, error) {
	row := q.db.QueryRowContext(ctx, getTaggedBudget, arg.UserID, arg.ID)
	var i TaggedBudget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Value,
		&i.IntervalInDays,
		&i.Tag,
		&i.Date,
	)
	return i, err
}

const getTaggedBudgets = `-- name: GetTaggedBudgets :many
SELECT id, user_id, name, value, interval_in_days, tag, date FROM tagged_budgets
WHERE user_id = ?
`

func (q *Queries) GetTaggedBudgets(ctx context.Context, userID int64) ([]TaggedBudget, error) {
	rows, err := q.db.QueryContext(ctx, getTaggedBudgets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaggedBudget
	for rows.Next() {
		var i TaggedBudget
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Value,
			&i.IntervalInDays,
			&i.Tag,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMonthlyBudget = `-- name: UpdateMonthlyBudget :exec
UPDATE monthly_budgets
SET name = ?, value = ?
WHERE user_id = ?
RETURNING id, user_id, name, value, date
`

type UpdateMonthlyBudgetParams struct {
	Name   string  `json:"name"`
	Value  float64 `json:"value"`
	UserID int64   `json:"userId"`
}

func (q *Queries) UpdateMonthlyBudget(ctx context.Context, arg UpdateMonthlyBudgetParams) error {
	_, err := q.db.ExecContext(ctx, updateMonthlyBudget, arg.Name, arg.Value, arg.UserID)
	return err
}
